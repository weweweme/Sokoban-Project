LastSamurai 복기

1. 프로그램을 만들 떄에는 꼭 기획서 먼저 작성
- 어떤 장르의 게임?
- 어떤 게임 진행 방식을 가지고있는가?
- 어떻게 하면 게임을 클리어하는지?
- 어떤 요소로 재미를 줄 것인지

2. 처음 설계도를 만들 때 생각해야 할 점
- 어떤 구성 요소를 배치할 것인지
	- 플레이어, 박스, 골, 장애물 등
- 맵 초기 세팅을 어떻게 가져갈 것인지
	- 어떤 게임을 만드느냐에 따라 세팅이 달라지기 때문
	- 단순한 소코반을 만드는데는 세팅할 것도 적고, 고려해야 할 요소가 적다
	- 하지만 어떤 요소를 넣는가에 따라 프로그램의 유지보수가 기하급수적으로 올라간다
	- 때문에, 처음부터 끝까지 게임의 사이즈를 생각해두어야 하며, 그에 맞는 설계를 해야한다
	- 단순한 소코반을 생각하고 개발했다가, 다른 기능까지 추가하기 시작한다면 코드가 꼬인다

3. 반복되는 부분을 빠르게 캐치해야 한다
- 예를들어 플레이어의 이동, 박스의 이동, 충돌 지점 확인 등
- 복잡한 듯 하나 반복되는 일련의 흐름을 찾아야한다 
	- 이러한 부분을 빠르게 캐치하고 모듈화하며 작업하면 시간을 절약할 수 있다
- 반복되는 부분을 처리할 수 있을만한 방법은 대부분 있다
	- 다른사람들의 코드를 많이 보고, 인사이트를 얻으며 많은 도구들도 알아보도록 하자

4. 기능을 추가할 때, 모르겠다고 덧붙이는 식의 코드는 짜지 말자
- 전역 변수를 사용할 땐 하더라도, 최대한 지역 변수를 사용해보자
- 막히는 순간에 쉬운 해결법을 사용한다면, 발전할 수 없으며 코드의 상호의존도가 높아진다
	- 어느 순간 어디서 꼬인지도 모른채 프로그램이 묶여버릴 수 있다
- 1번과 연결된다. 어느 정도의 소프트웨어 디자인을 할 것인지 미리 생각해두고, 취할 것과 쳐내야할 것을 구분할 줄 알아야 한다

5. 구역을 잘 나누어야 하는 의미가 있었다
- 어떤 기능을 추가할 것인지 정하거나 어디에서 문제가 일어났는지 파악하기 좀 더 쉽다
- 프로그래밍의 핵심은 왜 데이터였는지, 조금 더 와닿게 되는 계기가 되었다

6. 이름 잘 짓기
- 많은 영단어 습득과 어휘력 필요
- 다른 사람들은 어떤 식으로 깔끔하게 네이밍을 하는지 알아보자
	- 항상 장점은 흡수하자
- 전치사를 잘 활용하자

7. 디버그를 얼마나 잘 활용하는지가 퀄리티를 가른다
- 좀 더 좋은 아키텍처를 구성할 수 있는 기회를 쉽게 보내지 말자
- 데이터를 어디서 받고 어디서 처리하고 어디에서 아웃풋 시키는지만 기억하자
- 프로그래밍의 핵심은 어떤 데이터를 파악하는지가 중요하다!